== Physical Plan ==
TakeOrderedAndProject (125)
+- * HashAggregate (124)
   +- Exchange (123)
      +- * HashAggregate (122)
         +- Union (121)
            :- * HashAggregate (100)
            :  +- Exchange (99)
            :     +- * HashAggregate (98)
            :        +- Union (97)
            :           :- * Filter (66)
            :           :  +- * HashAggregate (65)
            :           :     +- Exchange (64)
            :           :        +- * HashAggregate (63)
            :           :           +- * Project (62)
            :           :              +- * BroadcastHashJoin Inner BuildRight (61)
            :           :                 :- * Project (59)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
            :           :                 :     :  :- * ColumnarToRow (3)
            :           :                 :     :  :  +- CometFilter (2)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (50)
            :           :                 :     :     +- * Project (49)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :           :- * ColumnarToRow (6)
            :           :                 :     :           :  +- CometFilter (5)
            :           :                 :     :           :     +- CometScan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (47)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                 :- * HashAggregate (35)
            :           :                 :     :                 :  +- Exchange (34)
            :           :                 :     :                 :     +- * HashAggregate (33)
            :           :                 :     :                 :        +- * Project (32)
            :           :                 :     :                 :           +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                 :     :                 :              :- * Project (29)
            :           :                 :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                 :              :     :- * ColumnarToRow (9)
            :           :                 :     :                 :              :     :  +- CometFilter (8)
            :           :                 :     :                 :              :     :     +- CometScan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :              :     +- BroadcastExchange (27)
            :           :                 :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :           :                 :     :                 :              :           :- * ColumnarToRow (12)
            :           :                 :     :                 :              :           :  +- CometFilter (11)
            :           :                 :     :                 :              :           :     +- CometScan parquet spark_catalog.default.item (10)
            :           :                 :     :                 :              :           +- BroadcastExchange (25)
            :           :                 :     :                 :              :              +- * Project (24)
            :           :                 :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                 :     :                 :              :                    :- * Project (21)
            :           :                 :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                 :              :                    :     :- * ColumnarToRow (15)
            :           :                 :     :                 :              :                    :     :  +- CometFilter (14)
            :           :                 :     :                 :              :                    :     :     +- CometScan parquet spark_catalog.default.catalog_sales (13)
            :           :                 :     :                 :              :                    :     +- BroadcastExchange (19)
            :           :                 :     :                 :              :                    :        +- * ColumnarToRow (18)
            :           :                 :     :                 :              :                    :           +- CometFilter (17)
            :           :                 :     :                 :              :                    :              +- CometScan parquet spark_catalog.default.item (16)
            :           :                 :     :                 :              :                    +- ReusedExchange (22)
            :           :                 :     :                 :              +- ReusedExchange (30)
            :           :                 :     :                 +- BroadcastExchange (45)
            :           :                 :     :                    +- * Project (44)
            :           :                 :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                          :- * Project (41)
            :           :                 :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                          :     :- * ColumnarToRow (38)
            :           :                 :     :                          :     :  +- CometFilter (37)
            :           :                 :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (36)
            :           :                 :     :                          :     +- ReusedExchange (39)
            :           :                 :     :                          +- ReusedExchange (42)
            :           :                 :     +- BroadcastExchange (57)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
            :           :                 :           :- * ColumnarToRow (54)
            :           :                 :           :  +- CometFilter (53)
            :           :                 :           :     +- CometScan parquet spark_catalog.default.item (52)
            :           :                 :           +- ReusedExchange (55)
            :           :                 +- ReusedExchange (60)
            :           :- * Filter (81)
            :           :  +- * HashAggregate (80)
            :           :     +- Exchange (79)
            :           :        +- * HashAggregate (78)
            :           :           +- * Project (77)
            :           :              +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                 :- * Project (74)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
            :           :                 :     :  :- * ColumnarToRow (69)
            :           :                 :     :  :  +- CometFilter (68)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (67)
            :           :                 :     :  +- ReusedExchange (70)
            :           :                 :     +- ReusedExchange (72)
            :           :                 +- ReusedExchange (75)
            :           +- * Filter (96)
            :              +- * HashAggregate (95)
            :                 +- Exchange (94)
            :                    +- * HashAggregate (93)
            :                       +- * Project (92)
            :                          +- * BroadcastHashJoin Inner BuildRight (91)
            :                             :- * Project (89)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (88)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (86)
            :                             :     :  :- * ColumnarToRow (84)
            :                             :     :  :  +- CometFilter (83)
            :                             :     :  :     +- CometScan parquet spark_catalog.default.web_sales (82)
            :                             :     :  +- ReusedExchange (85)
            :                             :     +- ReusedExchange (87)
            :                             +- ReusedExchange (90)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- * HashAggregate (102)
            :           +- ReusedExchange (101)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            +- * HashAggregate (120)
               +- Exchange (119)
                  +- * HashAggregate (118)
                     +- * HashAggregate (117)
                        +- ReusedExchange (116)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(12) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(18) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(19) BroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(22) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#26, i_class_id#15 AS class_id#27, i_category_id#16 AS category_id#28]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#25]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(34) Exchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: hashpartitioning(brand_id#26, class_id#27, category_id#28, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) CometFilter
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Condition : isnotnull(ws_item_sk#29)

(38) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#29]
Right keys [1]: [i_item_sk#32]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35]
Input [6]: [ws_item_sk#29, ws_sold_date_sk#30, i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(42) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#36]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Input [5]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35, d_date_sk#36]

(45) BroadcastExchange
Input [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#26, 0), isnull(brand_id#26), coalesce(class_id#27, 0), isnull(class_id#27), coalesce(category_id#28, 0), isnull(category_id#28)]
Right keys [6]: [coalesce(i_brand_id#33, 0), isnull(i_brand_id#33), coalesce(i_class_id#34, 0), isnull(i_class_id#34), coalesce(i_category_id#35, 0), isnull(i_category_id#35)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#26, class_id#27, category_id#28]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#37]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#26, class_id#27, category_id#28]

(50) BroadcastExchange
Input [1]: [ss_item_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) CometFilter
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Condition : isnotnull(i_item_sk#38)

(54) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#37]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#38]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(58) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#38]
Join type: Inner
Join condition: None

(59) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(60) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#42]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(62) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41, d_date_sk#42]

(63) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#43, isEmpty#44, count#45]
Results [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(64) Exchange
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Arguments: hashpartitioning(i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(65) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49, count(1)#50]
Results [6]: [store AS channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49 AS sales#52, count(1)#50 AS number_sales#53]

(66) Filter [codegen id : 26]
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sales#52, number_sales#53]
Condition : (isnotnull(sales#52) AND (cast(sales#52 as decimal(32,6)) > cast(Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#56, cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#59), dynamicpruningexpression(cs_sold_date_sk#59 IN dynamicpruning#60)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(68) CometFilter
Input [4]: [cs_item_sk#56, cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59]
Condition : isnotnull(cs_item_sk#56)

(69) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#56, cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59]

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#61]

(71) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#56]
Right keys [1]: [ss_item_sk#61]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(73) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#56]
Right keys [1]: [i_item_sk#62]
Join type: Inner
Join condition: None

(74) Project [codegen id : 51]
Output [6]: [cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [8]: [cs_item_sk#56, cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59, i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(75) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#66]

(76) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#59]
Right keys [1]: [d_date_sk#66]
Join type: Inner
Join condition: None

(77) Project [codegen id : 51]
Output [5]: [cs_quantity#57, cs_list_price#58, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [7]: [cs_quantity#57, cs_list_price#58, cs_sold_date_sk#59, i_brand_id#63, i_class_id#64, i_category_id#65, d_date_sk#66]

(78) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#57, cs_list_price#58, i_brand_id#63, i_class_id#64, i_category_id#65]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [partial_sum((cast(cs_quantity#57 as decimal(10,0)) * cs_list_price#58)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]

(79) Exchange
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#63, i_class_id#64, i_category_id#65, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(80) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [sum((cast(cs_quantity#57 as decimal(10,0)) * cs_list_price#58)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#57 as decimal(10,0)) * cs_list_price#58))#73, count(1)#74]
Results [6]: [catalog AS channel#75, i_brand_id#63, i_class_id#64, i_category_id#65, sum((cast(cs_quantity#57 as decimal(10,0)) * cs_list_price#58))#73 AS sales#76, count(1)#74 AS number_sales#77]

(81) Filter [codegen id : 52]
Input [6]: [channel#75, i_brand_id#63, i_class_id#64, i_category_id#65, sales#76, number_sales#77]
Condition : (isnotnull(sales#76) AND (cast(sales#76 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(82) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#81), dynamicpruningexpression(ws_sold_date_sk#81 IN dynamicpruning#82)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) CometFilter
Input [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]
Condition : isnotnull(ws_item_sk#78)

(84) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]

(85) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#83]

(86) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#78]
Right keys [1]: [ss_item_sk#83]
Join type: LeftSemi
Join condition: None

(87) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(88) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#78]
Right keys [1]: [i_item_sk#84]
Join type: Inner
Join condition: None

(89) Project [codegen id : 77]
Output [6]: [ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [8]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(90) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#88]

(91) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#81]
Right keys [1]: [d_date_sk#88]
Join type: Inner
Join condition: None

(92) Project [codegen id : 77]
Output [5]: [ws_quantity#79, ws_list_price#80, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [7]: [ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_brand_id#85, i_class_id#86, i_category_id#87, d_date_sk#88]

(93) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#79, ws_list_price#80, i_brand_id#85, i_class_id#86, i_category_id#87]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [partial_sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80)), partial_count(1)]
Aggregate Attributes [3]: [sum#89, isEmpty#90, count#91]
Results [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]

(94) Exchange
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Arguments: hashpartitioning(i_brand_id#85, i_class_id#86, i_category_id#87, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(95) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80))#95, count(1)#96]
Results [6]: [web AS channel#97, i_brand_id#85, i_class_id#86, i_category_id#87, sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80))#95 AS sales#98, count(1)#96 AS number_sales#99]

(96) Filter [codegen id : 78]
Input [6]: [channel#97, i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99]
Condition : (isnotnull(sales#98) AND (cast(sales#98 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(97) Union

(98) HashAggregate [codegen id : 79]
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sales#52, number_sales#53]
Keys [4]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum(sales#52), partial_sum(number_sales#53)]
Aggregate Attributes [3]: [sum#100, isEmpty#101, sum#102]
Results [7]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum#103, isEmpty#104, sum#105]

(99) Exchange
Input [7]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum#103, isEmpty#104, sum#105]
Arguments: hashpartitioning(channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(100) HashAggregate [codegen id : 80]
Input [7]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum#103, isEmpty#104, sum#105]
Keys [4]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum(sales#52), sum(number_sales#53)]
Aggregate Attributes [2]: [sum(sales#52)#106, sum(number_sales#53)#107]
Results [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum(sales#52)#106 AS sum_sales#108, sum(number_sales#53)#107 AS number_sales#109]

(101) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#110, i_brand_id#111, i_class_id#112, i_category_id#113, sum#114, isEmpty#115, sum#116]

(102) HashAggregate [codegen id : 160]
Input [7]: [channel#110, i_brand_id#111, i_class_id#112, i_category_id#113, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#110, i_brand_id#111, i_class_id#112, i_category_id#113]
Functions [2]: [sum(sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sales#117)#106, sum(number_sales#118)#107]
Results [5]: [channel#110, i_brand_id#111, i_class_id#112, sum(sales#117)#106 AS sum_sales#119, sum(number_sales#118)#107 AS number_sales#120]

(103) HashAggregate [codegen id : 160]
Input [5]: [channel#110, i_brand_id#111, i_class_id#112, sum_sales#119, number_sales#120]
Keys [3]: [channel#110, i_brand_id#111, i_class_id#112]
Functions [2]: [partial_sum(sum_sales#119), partial_sum(number_sales#120)]
Aggregate Attributes [3]: [sum#121, isEmpty#122, sum#123]
Results [6]: [channel#110, i_brand_id#111, i_class_id#112, sum#124, isEmpty#125, sum#126]

(104) Exchange
Input [6]: [channel#110, i_brand_id#111, i_class_id#112, sum#124, isEmpty#125, sum#126]
Arguments: hashpartitioning(channel#110, i_brand_id#111, i_class_id#112, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(105) HashAggregate [codegen id : 161]
Input [6]: [channel#110, i_brand_id#111, i_class_id#112, sum#124, isEmpty#125, sum#126]
Keys [3]: [channel#110, i_brand_id#111, i_class_id#112]
Functions [2]: [sum(sum_sales#119), sum(number_sales#120)]
Aggregate Attributes [2]: [sum(sum_sales#119)#127, sum(number_sales#120)#128]
Results [6]: [channel#110, i_brand_id#111, i_class_id#112, null AS i_category_id#129, sum(sum_sales#119)#127 AS sum(sum_sales)#130, sum(number_sales#120)#128 AS sum(number_sales)#131]

(106) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#132, i_brand_id#133, i_class_id#134, i_category_id#135, sum#136, isEmpty#137, sum#138]

(107) HashAggregate [codegen id : 241]
Input [7]: [channel#132, i_brand_id#133, i_class_id#134, i_category_id#135, sum#136, isEmpty#137, sum#138]
Keys [4]: [channel#132, i_brand_id#133, i_class_id#134, i_category_id#135]
Functions [2]: [sum(sales#139), sum(number_sales#140)]
Aggregate Attributes [2]: [sum(sales#139)#106, sum(number_sales#140)#107]
Results [4]: [channel#132, i_brand_id#133, sum(sales#139)#106 AS sum_sales#141, sum(number_sales#140)#107 AS number_sales#142]

(108) HashAggregate [codegen id : 241]
Input [4]: [channel#132, i_brand_id#133, sum_sales#141, number_sales#142]
Keys [2]: [channel#132, i_brand_id#133]
Functions [2]: [partial_sum(sum_sales#141), partial_sum(number_sales#142)]
Aggregate Attributes [3]: [sum#143, isEmpty#144, sum#145]
Results [5]: [channel#132, i_brand_id#133, sum#146, isEmpty#147, sum#148]

(109) Exchange
Input [5]: [channel#132, i_brand_id#133, sum#146, isEmpty#147, sum#148]
Arguments: hashpartitioning(channel#132, i_brand_id#133, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(110) HashAggregate [codegen id : 242]
Input [5]: [channel#132, i_brand_id#133, sum#146, isEmpty#147, sum#148]
Keys [2]: [channel#132, i_brand_id#133]
Functions [2]: [sum(sum_sales#141), sum(number_sales#142)]
Aggregate Attributes [2]: [sum(sum_sales#141)#149, sum(number_sales#142)#150]
Results [6]: [channel#132, i_brand_id#133, null AS i_class_id#151, null AS i_category_id#152, sum(sum_sales#141)#149 AS sum(sum_sales)#153, sum(number_sales#142)#150 AS sum(number_sales)#154]

(111) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#155, i_brand_id#156, i_class_id#157, i_category_id#158, sum#159, isEmpty#160, sum#161]

(112) HashAggregate [codegen id : 322]
Input [7]: [channel#155, i_brand_id#156, i_class_id#157, i_category_id#158, sum#159, isEmpty#160, sum#161]
Keys [4]: [channel#155, i_brand_id#156, i_class_id#157, i_category_id#158]
Functions [2]: [sum(sales#162), sum(number_sales#163)]
Aggregate Attributes [2]: [sum(sales#162)#106, sum(number_sales#163)#107]
Results [3]: [channel#155, sum(sales#162)#106 AS sum_sales#164, sum(number_sales#163)#107 AS number_sales#165]

(113) HashAggregate [codegen id : 322]
Input [3]: [channel#155, sum_sales#164, number_sales#165]
Keys [1]: [channel#155]
Functions [2]: [partial_sum(sum_sales#164), partial_sum(number_sales#165)]
Aggregate Attributes [3]: [sum#166, isEmpty#167, sum#168]
Results [4]: [channel#155, sum#169, isEmpty#170, sum#171]

(114) Exchange
Input [4]: [channel#155, sum#169, isEmpty#170, sum#171]
Arguments: hashpartitioning(channel#155, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(115) HashAggregate [codegen id : 323]
Input [4]: [channel#155, sum#169, isEmpty#170, sum#171]
Keys [1]: [channel#155]
Functions [2]: [sum(sum_sales#164), sum(number_sales#165)]
Aggregate Attributes [2]: [sum(sum_sales#164)#172, sum(number_sales#165)#173]
Results [6]: [channel#155, null AS i_brand_id#174, null AS i_class_id#175, null AS i_category_id#176, sum(sum_sales#164)#172 AS sum(sum_sales)#177, sum(number_sales#165)#173 AS sum(number_sales)#178]

(116) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#179, i_brand_id#180, i_class_id#181, i_category_id#182, sum#183, isEmpty#184, sum#185]

(117) HashAggregate [codegen id : 403]
Input [7]: [channel#179, i_brand_id#180, i_class_id#181, i_category_id#182, sum#183, isEmpty#184, sum#185]
Keys [4]: [channel#179, i_brand_id#180, i_class_id#181, i_category_id#182]
Functions [2]: [sum(sales#186), sum(number_sales#187)]
Aggregate Attributes [2]: [sum(sales#186)#106, sum(number_sales#187)#107]
Results [2]: [sum(sales#186)#106 AS sum_sales#188, sum(number_sales#187)#107 AS number_sales#189]

(118) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#188, number_sales#189]
Keys: []
Functions [2]: [partial_sum(sum_sales#188), partial_sum(number_sales#189)]
Aggregate Attributes [3]: [sum#190, isEmpty#191, sum#192]
Results [3]: [sum#193, isEmpty#194, sum#195]

(119) Exchange
Input [3]: [sum#193, isEmpty#194, sum#195]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(120) HashAggregate [codegen id : 404]
Input [3]: [sum#193, isEmpty#194, sum#195]
Keys: []
Functions [2]: [sum(sum_sales#188), sum(number_sales#189)]
Aggregate Attributes [2]: [sum(sum_sales#188)#196, sum(number_sales#189)#197]
Results [6]: [null AS channel#198, null AS i_brand_id#199, null AS i_class_id#200, null AS i_category_id#201, sum(sum_sales#188)#196 AS sum(sum_sales)#202, sum(number_sales#189)#197 AS sum(number_sales)#203]

(121) Union

(122) HashAggregate [codegen id : 405]
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Keys [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]

(123) Exchange
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Arguments: hashpartitioning(channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(124) HashAggregate [codegen id : 406]
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Keys [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]

(125) TakeOrderedAndProject
Input [6]: [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]
Arguments: 100, [channel#51 ASC NULLS FIRST, i_brand_id#39 ASC NULLS FIRST, i_class_id#40 ASC NULLS FIRST, i_category_id#41 ASC NULLS FIRST], [channel#51, i_brand_id#39, i_class_id#40, i_category_id#41, sum_sales#108, number_sales#109]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#54, [id=#55]
* HashAggregate (144)
+- Exchange (143)
   +- * HashAggregate (142)
      +- Union (141)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * ColumnarToRow (127)
         :     :  +- CometScan parquet spark_catalog.default.store_sales (126)
         :     +- ReusedExchange (128)
         :- * Project (135)
         :  +- * BroadcastHashJoin Inner BuildRight (134)
         :     :- * ColumnarToRow (132)
         :     :  +- CometScan parquet spark_catalog.default.catalog_sales (131)
         :     +- ReusedExchange (133)
         +- * Project (140)
            +- * BroadcastHashJoin Inner BuildRight (139)
               :- * ColumnarToRow (137)
               :  +- CometScan parquet spark_catalog.default.web_sales (136)
               +- ReusedExchange (138)


(126) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#204, ss_list_price#205, ss_sold_date_sk#206]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#206), dynamicpruningexpression(ss_sold_date_sk#206 IN dynamicpruning#207)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#204, ss_list_price#205, ss_sold_date_sk#206]

(128) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#208]

(129) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#206]
Right keys [1]: [d_date_sk#208]
Join type: Inner
Join condition: None

(130) Project [codegen id : 2]
Output [2]: [ss_quantity#204 AS quantity#209, ss_list_price#205 AS list_price#210]
Input [4]: [ss_quantity#204, ss_list_price#205, ss_sold_date_sk#206, d_date_sk#208]

(131) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#211, cs_list_price#212, cs_sold_date_sk#213]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#213), dynamicpruningexpression(cs_sold_date_sk#213 IN dynamicpruning#214)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#211, cs_list_price#212, cs_sold_date_sk#213]

(133) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#215]

(134) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#213]
Right keys [1]: [d_date_sk#215]
Join type: Inner
Join condition: None

(135) Project [codegen id : 4]
Output [2]: [cs_quantity#211 AS quantity#216, cs_list_price#212 AS list_price#217]
Input [4]: [cs_quantity#211, cs_list_price#212, cs_sold_date_sk#213, d_date_sk#215]

(136) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#218, ws_list_price#219, ws_sold_date_sk#220]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#220), dynamicpruningexpression(ws_sold_date_sk#220 IN dynamicpruning#221)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#218, ws_list_price#219, ws_sold_date_sk#220]

(138) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#222]

(139) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#220]
Right keys [1]: [d_date_sk#222]
Join type: Inner
Join condition: None

(140) Project [codegen id : 6]
Output [2]: [ws_quantity#218 AS quantity#223, ws_list_price#219 AS list_price#224]
Input [4]: [ws_quantity#218, ws_list_price#219, ws_sold_date_sk#220, d_date_sk#222]

(141) Union

(142) HashAggregate [codegen id : 7]
Input [2]: [quantity#209, list_price#210]
Keys: []
Functions [1]: [partial_avg((cast(quantity#209 as decimal(10,0)) * list_price#210))]
Aggregate Attributes [2]: [sum#225, count#226]
Results [2]: [sum#227, count#228]

(143) Exchange
Input [2]: [sum#227, count#228]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(144) HashAggregate [codegen id : 8]
Input [2]: [sum#227, count#228]
Keys: []
Functions [1]: [avg((cast(quantity#209 as decimal(10,0)) * list_price#210))]
Aggregate Attributes [1]: [avg((cast(quantity#209 as decimal(10,0)) * list_price#210))#229]
Results [1]: [avg((cast(quantity#209 as decimal(10,0)) * list_price#210))#229 AS average_sales#230]

Subquery:2 Hosting operator id = 126 Hosting Expression = ss_sold_date_sk#206 IN dynamicpruning#12

Subquery:3 Hosting operator id = 131 Hosting Expression = cs_sold_date_sk#213 IN dynamicpruning#214
BroadcastExchange (149)
+- * ColumnarToRow (148)
   +- CometProject (147)
      +- CometFilter (146)
         +- CometScan parquet spark_catalog.default.date_dim (145)


(145) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#215, d_year#231]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(146) CometFilter
Input [2]: [d_date_sk#215, d_year#231]
Condition : (((isnotnull(d_year#231) AND (d_year#231 >= 1998)) AND (d_year#231 <= 2000)) AND isnotnull(d_date_sk#215))

(147) CometProject
Input [2]: [d_date_sk#215, d_year#231]
Arguments: [d_date_sk#215], [d_date_sk#215]

(148) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#215]

(149) BroadcastExchange
Input [1]: [d_date_sk#215]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

Subquery:4 Hosting operator id = 136 Hosting Expression = ws_sold_date_sk#220 IN dynamicpruning#214

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (154)
+- * ColumnarToRow (153)
   +- CometProject (152)
      +- CometFilter (151)
         +- CometScan parquet spark_catalog.default.date_dim (150)


(150) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#42, d_year#232, d_moy#233]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(151) CometFilter
Input [3]: [d_date_sk#42, d_year#232, d_moy#233]
Condition : ((((isnotnull(d_year#232) AND isnotnull(d_moy#233)) AND (d_year#232 = 2000)) AND (d_moy#233 = 11)) AND isnotnull(d_date_sk#42))

(152) CometProject
Input [3]: [d_date_sk#42, d_year#232, d_moy#233]
Arguments: [d_date_sk#42], [d_date_sk#42]

(153) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#42]

(154) BroadcastExchange
Input [1]: [d_date_sk#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (159)
+- * ColumnarToRow (158)
   +- CometProject (157)
      +- CometFilter (156)
         +- CometScan parquet spark_catalog.default.date_dim (155)


(155) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#234]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(156) CometFilter
Input [2]: [d_date_sk#25, d_year#234]
Condition : (((isnotnull(d_year#234) AND (d_year#234 >= 1999)) AND (d_year#234 <= 2001)) AND isnotnull(d_date_sk#25))

(157) CometProject
Input [2]: [d_date_sk#25, d_year#234]
Arguments: [d_date_sk#25], [d_date_sk#25]

(158) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#25]

(159) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#12

Subquery:9 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#54, [id=#55]

Subquery:10 Hosting operator id = 67 Hosting Expression = cs_sold_date_sk#59 IN dynamicpruning#5

Subquery:11 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#54, [id=#55]

Subquery:12 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#81 IN dynamicpruning#5


