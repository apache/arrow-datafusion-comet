== Physical Plan ==
TakeOrderedAndProject (40)
+- * Project (39)
   +- * BroadcastHashJoin Inner BuildRight (38)
      :- * Project (36)
      :  +- * BroadcastHashJoin Inner BuildRight (35)
      :     :- * Project (30)
      :     :  +- * SortMergeJoin Inner (29)
      :     :     :- * Sort (14)
      :     :     :  +- * Project (13)
      :     :     :     +- * Filter (12)
      :     :     :        +- Window (11)
      :     :     :           +- * ColumnarToRow (10)
      :     :     :              +- CometSort (9)
      :     :     :                 +- CometExchange (8)
      :     :     :                    +- CometFilter (7)
      :     :     :                       +- CometHashAggregate (6)
      :     :     :                          +- CometExchange (5)
      :     :     :                             +- CometHashAggregate (4)
      :     :     :                                +- CometProject (3)
      :     :     :                                   +- CometFilter (2)
      :     :     :                                      +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :     +- * Sort (28)
      :     :        +- * Project (27)
      :     :           +- * Filter (26)
      :     :              +- Window (25)
      :     :                 +- * ColumnarToRow (24)
      :     :                    +- CometSort (23)
      :     :                       +- CometExchange (22)
      :     :                          +- CometFilter (21)
      :     :                             +- CometHashAggregate (20)
      :     :                                +- CometExchange (19)
      :     :                                   +- CometHashAggregate (18)
      :     :                                      +- CometProject (17)
      :     :                                         +- CometFilter (16)
      :     :                                            +- CometScan parquet spark_catalog.default.store_sales (15)
      :     +- BroadcastExchange (34)
      :        +- * ColumnarToRow (33)
      :           +- CometFilter (32)
      :              +- CometScan parquet spark_catalog.default.item (31)
      +- ReusedExchange (37)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND (ss_store_sk#2 = 4))

(3) CometProject
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1, ss_net_profit#3], [ss_item_sk#1, ss_net_profit#3]

(4) CometHashAggregate
Input [2]: [ss_item_sk#1, ss_net_profit#3]
Keys [1]: [ss_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#3))]

(5) CometExchange
Input [3]: [ss_item_sk#1, sum#5, count#6]
Arguments: hashpartitioning(ss_item_sk#1, 5), Exchange hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(6) CometHashAggregate
Input [3]: [ss_item_sk#1, sum#5, count#6]
Keys [1]: [ss_item_sk#1]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]

(7) CometFilter
Input [2]: [item_sk#7, rank_col#8]
Condition : (isnotnull(rank_col#8) AND (cast(rank_col#8 as decimal(13,7)) > (0.9 * Subquery scalar-subquery#9, [id=#10])))

(8) CometExchange
Input [2]: [item_sk#7, rank_col#8]
Arguments: SinglePartition, Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(9) CometSort
Input [2]: [item_sk#7, rank_col#8]
Arguments: [item_sk#7, rank_col#8], [rank_col#8 ASC NULLS FIRST]

(10) ColumnarToRow [codegen id : 1]
Input [2]: [item_sk#7, rank_col#8]

(11) Window
Input [2]: [item_sk#7, rank_col#8]
Arguments: [rank(rank_col#8) windowspecdefinition(rank_col#8 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#11], [rank_col#8 ASC NULLS FIRST]

(12) Filter [codegen id : 2]
Input [3]: [item_sk#7, rank_col#8, rnk#11]
Condition : ((rnk#11 < 11) AND isnotnull(item_sk#7))

(13) Project [codegen id : 2]
Output [2]: [item_sk#7, rnk#11]
Input [3]: [item_sk#7, rank_col#8, rnk#11]

(14) Sort [codegen id : 2]
Input [2]: [item_sk#7, rnk#11]
Arguments: [rnk#11 ASC NULLS FIRST], false, 0

(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#12, ss_store_sk#13, ss_net_profit#14, ss_sold_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(16) CometFilter
Input [4]: [ss_item_sk#12, ss_store_sk#13, ss_net_profit#14, ss_sold_date_sk#15]
Condition : (isnotnull(ss_store_sk#13) AND (ss_store_sk#13 = 4))

(17) CometProject
Input [4]: [ss_item_sk#12, ss_store_sk#13, ss_net_profit#14, ss_sold_date_sk#15]
Arguments: [ss_item_sk#12, ss_net_profit#14], [ss_item_sk#12, ss_net_profit#14]

(18) CometHashAggregate
Input [2]: [ss_item_sk#12, ss_net_profit#14]
Keys [1]: [ss_item_sk#12]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#14))]

(19) CometExchange
Input [3]: [ss_item_sk#12, sum#16, count#17]
Arguments: hashpartitioning(ss_item_sk#12, 5), Exchange hashpartitioning(ss_item_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=5], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(20) CometHashAggregate
Input [3]: [ss_item_sk#12, sum#16, count#17]
Keys [1]: [ss_item_sk#12]
Functions [1]: [avg(UnscaledValue(ss_net_profit#14))]

(21) CometFilter
Input [2]: [item_sk#18, rank_col#19]
Condition : (isnotnull(rank_col#19) AND (cast(rank_col#19 as decimal(13,7)) > (0.9 * ReusedSubquery Subquery scalar-subquery#9, [id=#10])))

(22) CometExchange
Input [2]: [item_sk#18, rank_col#19]
Arguments: SinglePartition, Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(23) CometSort
Input [2]: [item_sk#18, rank_col#19]
Arguments: [item_sk#18, rank_col#19], [rank_col#19 DESC NULLS LAST]

(24) ColumnarToRow [codegen id : 3]
Input [2]: [item_sk#18, rank_col#19]

(25) Window
Input [2]: [item_sk#18, rank_col#19]
Arguments: [rank(rank_col#19) windowspecdefinition(rank_col#19 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#20], [rank_col#19 DESC NULLS LAST]

(26) Filter [codegen id : 4]
Input [3]: [item_sk#18, rank_col#19, rnk#20]
Condition : ((rnk#20 < 11) AND isnotnull(item_sk#18))

(27) Project [codegen id : 4]
Output [2]: [item_sk#18, rnk#20]
Input [3]: [item_sk#18, rank_col#19, rnk#20]

(28) Sort [codegen id : 4]
Input [2]: [item_sk#18, rnk#20]
Arguments: [rnk#20 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 7]
Left keys [1]: [rnk#11]
Right keys [1]: [rnk#20]
Join type: Inner
Join condition: None

(30) Project [codegen id : 7]
Output [3]: [item_sk#7, rnk#11, item_sk#18]
Input [4]: [item_sk#7, rnk#11, item_sk#18, rnk#20]

(unknown) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#21, i_product_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_product_name:string>

(32) CometFilter
Input [2]: [i_item_sk#21, i_product_name#22]
Condition : isnotnull(i_item_sk#21)

(33) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#21, i_product_name#22]

(34) BroadcastExchange
Input [2]: [i_item_sk#21, i_product_name#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(35) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [item_sk#7]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(36) Project [codegen id : 7]
Output [3]: [rnk#11, item_sk#18, i_product_name#22]
Input [5]: [item_sk#7, rnk#11, item_sk#18, i_item_sk#21, i_product_name#22]

(37) ReusedExchange [Reuses operator id: 34]
Output [2]: [i_item_sk#23, i_product_name#24]

(38) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [item_sk#18]
Right keys [1]: [i_item_sk#23]
Join type: Inner
Join condition: None

(39) Project [codegen id : 7]
Output [3]: [rnk#11, i_product_name#22 AS best_performing#25, i_product_name#24 AS worst_performing#26]
Input [5]: [rnk#11, item_sk#18, i_product_name#22, i_item_sk#23, i_product_name#24]

(40) TakeOrderedAndProject
Input [3]: [rnk#11, best_performing#25, worst_performing#26]
Arguments: 100, [rnk#11 ASC NULLS FIRST], [rnk#11, best_performing#25, worst_performing#26]

===== Subqueries =====

Subquery:1 Hosting operator id = 7 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
* ColumnarToRow (47)
+- CometHashAggregate (46)
   +- CometExchange (45)
      +- CometHashAggregate (44)
         +- CometProject (43)
            +- CometFilter (42)
               +- CometScan parquet spark_catalog.default.store_sales (41)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_addr_sk#27, ss_store_sk#28, ss_net_profit#29, ss_sold_date_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(42) CometFilter
Input [4]: [ss_addr_sk#27, ss_store_sk#28, ss_net_profit#29, ss_sold_date_sk#30]
Condition : ((isnotnull(ss_store_sk#28) AND (ss_store_sk#28 = 4)) AND isnull(ss_addr_sk#27))

(43) CometProject
Input [4]: [ss_addr_sk#27, ss_store_sk#28, ss_net_profit#29, ss_sold_date_sk#30]
Arguments: [ss_store_sk#28, ss_net_profit#29], [ss_store_sk#28, ss_net_profit#29]

(44) CometHashAggregate
Input [2]: [ss_store_sk#28, ss_net_profit#29]
Keys [1]: [ss_store_sk#28]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#29))]

(45) CometExchange
Input [3]: [ss_store_sk#28, sum#31, count#32]
Arguments: hashpartitioning(ss_store_sk#28, 5), Exchange hashpartitioning(ss_store_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=10], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=11]

(46) CometHashAggregate
Input [3]: [ss_store_sk#28, sum#31, count#32]
Keys [1]: [ss_store_sk#28]
Functions [1]: [avg(UnscaledValue(ss_net_profit#29))]

(47) ColumnarToRow [codegen id : 1]
Input [1]: [rank_col#33]

Subquery:2 Hosting operator id = 21 Hosting Expression = ReusedSubquery Subquery scalar-subquery#9, [id=#10]


