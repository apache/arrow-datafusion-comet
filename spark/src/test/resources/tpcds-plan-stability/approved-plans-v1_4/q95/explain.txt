== Physical Plan ==
* HashAggregate (64)
+- Exchange (63)
   +- * HashAggregate (62)
      +- * HashAggregate (61)
         +- * HashAggregate (60)
            +- * Project (59)
               +- * BroadcastHashJoin Inner BuildRight (58)
                  :- * Project (52)
                  :  +- * BroadcastHashJoin Inner BuildRight (51)
                  :     :- * Project (45)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (44)
                  :     :     :- * SortMergeJoin LeftSemi (38)
                  :     :     :  :- * SortMergeJoin LeftSemi (21)
                  :     :     :  :  :- * ColumnarToRow (6)
                  :     :     :  :  :  +- CometSort (5)
                  :     :     :  :  :     +- CometExchange (4)
                  :     :     :  :  :        +- CometProject (3)
                  :     :     :  :  :           +- CometFilter (2)
                  :     :     :  :  :              +- CometScan parquet spark_catalog.default.web_sales (1)
                  :     :     :  :  +- * Project (20)
                  :     :     :  :     +- * SortMergeJoin Inner (19)
                  :     :     :  :        :- * ColumnarToRow (12)
                  :     :     :  :        :  +- CometSort (11)
                  :     :     :  :        :     +- CometExchange (10)
                  :     :     :  :        :        +- CometProject (9)
                  :     :     :  :        :           +- CometFilter (8)
                  :     :     :  :        :              +- CometScan parquet spark_catalog.default.web_sales (7)
                  :     :     :  :        +- * ColumnarToRow (18)
                  :     :     :  :           +- CometSort (17)
                  :     :     :  :              +- CometExchange (16)
                  :     :     :  :                 +- CometProject (15)
                  :     :     :  :                    +- CometFilter (14)
                  :     :     :  :                       +- CometScan parquet spark_catalog.default.web_sales (13)
                  :     :     :  +- * Project (37)
                  :     :     :     +- * SortMergeJoin Inner (36)
                  :     :     :        :- * ColumnarToRow (27)
                  :     :     :        :  +- CometSort (26)
                  :     :     :        :     +- CometExchange (25)
                  :     :     :        :        +- CometProject (24)
                  :     :     :        :           +- CometFilter (23)
                  :     :     :        :              +- CometScan parquet spark_catalog.default.web_returns (22)
                  :     :     :        +- * Project (35)
                  :     :     :           +- * SortMergeJoin Inner (34)
                  :     :     :              :- * ColumnarToRow (30)
                  :     :     :              :  +- CometSort (29)
                  :     :     :              :     +- ReusedExchange (28)
                  :     :     :              +- * ColumnarToRow (33)
                  :     :     :                 +- CometSort (32)
                  :     :     :                    +- ReusedExchange (31)
                  :     :     +- BroadcastExchange (43)
                  :     :        +- * ColumnarToRow (42)
                  :     :           +- CometProject (41)
                  :     :              +- CometFilter (40)
                  :     :                 +- CometScan parquet spark_catalog.default.date_dim (39)
                  :     +- BroadcastExchange (50)
                  :        +- * ColumnarToRow (49)
                  :           +- CometProject (48)
                  :              +- CometFilter (47)
                  :                 +- CometScan parquet spark_catalog.default.customer_address (46)
                  +- BroadcastExchange (57)
                     +- * ColumnarToRow (56)
                        +- CometProject (55)
                           +- CometFilter (54)
                              +- CometScan parquet spark_catalog.default.web_site (53)


(unknown) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(3) CometProject
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(4) CometExchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), Exchange hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(5) CometSort
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_order_number#4 ASC NULLS FIRST]

(6) ColumnarToRow [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) CometFilter
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_order_number#9) AND isnotnull(ws_warehouse_sk#8))

(9) CometProject
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_warehouse_sk#8, ws_order_number#9]

(10) CometExchange
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: hashpartitioning(ws_order_number#9, 5), Exchange hashpartitioning(ws_order_number#9, 5), ENSURE_REQUIREMENTS, [plan_id=3], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(11) CometSort
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_order_number#9 ASC NULLS FIRST]

(12) ColumnarToRow [codegen id : 2]
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(14) CometFilter
Input [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]
Condition : (isnotnull(ws_order_number#12) AND isnotnull(ws_warehouse_sk#11))

(15) CometProject
Input [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]
Arguments: [ws_warehouse_sk#11, ws_order_number#12], [ws_warehouse_sk#11, ws_order_number#12]

(16) CometExchange
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: hashpartitioning(ws_order_number#12, 5), Exchange hashpartitioning(ws_order_number#12, 5), ENSURE_REQUIREMENTS, [plan_id=5], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(17) CometSort
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_warehouse_sk#11, ws_order_number#12], [ws_order_number#12 ASC NULLS FIRST]

(18) ColumnarToRow [codegen id : 3]
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]

(19) SortMergeJoin [codegen id : 4]
Left keys [1]: [ws_order_number#9]
Right keys [1]: [ws_order_number#12]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#11)

(20) Project [codegen id : 4]
Output [1]: [ws_order_number#9]
Input [4]: [ws_warehouse_sk#8, ws_order_number#9, ws_warehouse_sk#11, ws_order_number#12]

(21) SortMergeJoin [codegen id : 5]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#9]
Join type: LeftSemi
Join condition: None

(unknown) Scan parquet spark_catalog.default.web_returns
Output [2]: [wr_order_number#14, wr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(23) CometFilter
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]
Condition : isnotnull(wr_order_number#14)

(24) CometProject
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]
Arguments: [wr_order_number#14], [wr_order_number#14]

(25) CometExchange
Input [1]: [wr_order_number#14]
Arguments: hashpartitioning(wr_order_number#14, 5), Exchange hashpartitioning(wr_order_number#14, 5), ENSURE_REQUIREMENTS, [plan_id=7], ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(26) CometSort
Input [1]: [wr_order_number#14]
Arguments: [wr_order_number#14], [wr_order_number#14 ASC NULLS FIRST]

(27) ColumnarToRow [codegen id : 6]
Input [1]: [wr_order_number#14]

(28) ReusedExchange [Reuses operator id: 10]
Output [2]: [ws_warehouse_sk#8, ws_order_number#9]

(29) CometSort
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_order_number#9 ASC NULLS FIRST]

(30) ColumnarToRow [codegen id : 7]
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]

(31) ReusedExchange [Reuses operator id: 16]
Output [2]: [ws_warehouse_sk#11, ws_order_number#12]

(32) CometSort
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_warehouse_sk#11, ws_order_number#12], [ws_order_number#12 ASC NULLS FIRST]

(33) ColumnarToRow [codegen id : 8]
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]

(34) SortMergeJoin [codegen id : 9]
Left keys [1]: [ws_order_number#9]
Right keys [1]: [ws_order_number#12]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#11)

(35) Project [codegen id : 9]
Output [1]: [ws_order_number#9]
Input [4]: [ws_warehouse_sk#8, ws_order_number#9, ws_warehouse_sk#11, ws_order_number#12]

(36) SortMergeJoin [codegen id : 10]
Left keys [1]: [wr_order_number#14]
Right keys [1]: [ws_order_number#9]
Join type: Inner
Join condition: None

(37) Project [codegen id : 10]
Output [1]: [wr_order_number#14]
Input [2]: [wr_order_number#14, ws_order_number#9]

(38) SortMergeJoin [codegen id : 14]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#14]
Join type: LeftSemi
Join condition: None

(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(40) CometFilter
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 1999-02-01)) AND (d_date#17 <= 1999-04-02)) AND isnotnull(d_date_sk#16))

(41) CometProject
Input [2]: [d_date_sk#16, d_date#17]
Arguments: [d_date_sk#16], [d_date_sk#16]

(42) ColumnarToRow [codegen id : 11]
Input [1]: [d_date_sk#16]

(43) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(45) Project [codegen id : 14]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#16]

(unknown) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#18, ca_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(47) CometFilter
Input [2]: [ca_address_sk#18, ca_state#19]
Condition : ((isnotnull(ca_state#19) AND (ca_state#19 = IL)) AND isnotnull(ca_address_sk#18))

(48) CometProject
Input [2]: [ca_address_sk#18, ca_state#19]
Arguments: [ca_address_sk#18], [ca_address_sk#18]

(49) ColumnarToRow [codegen id : 12]
Input [1]: [ca_address_sk#18]

(50) BroadcastExchange
Input [1]: [ca_address_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#18]
Join type: Inner
Join condition: None

(52) Project [codegen id : 14]
Output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#18]

(unknown) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#20, web_company_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(54) CometFilter
Input [2]: [web_site_sk#20, web_company_name#21]
Condition : ((isnotnull(web_company_name#21) AND (web_company_name#21 = pri                                               )) AND isnotnull(web_site_sk#20))

(55) CometProject
Input [2]: [web_site_sk#20, web_company_name#21]
Arguments: [web_site_sk#20], [web_site_sk#20]

(56) ColumnarToRow [codegen id : 13]
Input [1]: [web_site_sk#20]

(57) BroadcastExchange
Input [1]: [web_site_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(58) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#20]
Join type: Inner
Join condition: None

(59) Project [codegen id : 14]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#20]

(60) HashAggregate [codegen id : 14]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#22, sum(UnscaledValue(ws_net_profit#6))#23]
Results [3]: [ws_order_number#4, sum#24, sum#25]

(61) HashAggregate [codegen id : 14]
Input [3]: [ws_order_number#4, sum#24, sum#25]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#22, sum(UnscaledValue(ws_net_profit#6))#23]
Results [3]: [ws_order_number#4, sum#24, sum#25]

(62) HashAggregate [codegen id : 14]
Input [3]: [ws_order_number#4, sum#24, sum#25]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#22, sum(UnscaledValue(ws_net_profit#6))#23, count(ws_order_number#4)#26]
Results [3]: [sum#24, sum#25, count#27]

(63) Exchange
Input [3]: [sum#24, sum#25, count#27]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(64) HashAggregate [codegen id : 15]
Input [3]: [sum#24, sum#25, count#27]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#22, sum(UnscaledValue(ws_net_profit#6))#23, count(ws_order_number#4)#26]
Results [3]: [count(ws_order_number#4)#26 AS order count #28, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#22,17,2) AS total shipping cost #29, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#23,17,2) AS total net profit #30]

