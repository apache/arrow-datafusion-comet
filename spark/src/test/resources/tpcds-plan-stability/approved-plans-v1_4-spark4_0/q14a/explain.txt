== Physical Plan ==
TakeOrderedAndProject (105)
+- * HashAggregate (104)
   +- Exchange (103)
      +- * HashAggregate (102)
         +- * Expand (101)
            +- Union (100)
               :- * Project (67)
               :  +- * Filter (66)
               :     +- * HashAggregate (65)
               :        +- Exchange (64)
               :           +- * HashAggregate (63)
               :              +- * Project (62)
               :                 +- * BroadcastHashJoin Inner BuildRight (61)
               :                    :- * Project (59)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (58)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (50)
               :                    :     :     +- * Project (49)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (48)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- CometScan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (47)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
               :                    :     :                 :- * HashAggregate (35)
               :                    :     :                 :  +- Exchange (34)
               :                    :     :                 :     +- * HashAggregate (33)
               :                    :     :                 :        +- * Project (32)
               :                    :     :                 :           +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                 :              :- * Project (29)
               :                    :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (28)
               :                    :     :                 :              :     :- * Filter (9)
               :                    :     :                 :              :     :  +- * ColumnarToRow (8)
               :                    :     :                 :              :     :     +- CometScan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :              :     +- BroadcastExchange (27)
               :                    :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
               :                    :     :                 :              :           :- * Filter (12)
               :                    :     :                 :              :           :  +- * ColumnarToRow (11)
               :                    :     :                 :              :           :     +- CometScan parquet spark_catalog.default.item (10)
               :                    :     :                 :              :           +- BroadcastExchange (25)
               :                    :     :                 :              :              +- * Project (24)
               :                    :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                 :              :                    :- * Project (21)
               :                    :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                    :     :                 :              :                    :     :- * Filter (15)
               :                    :     :                 :              :                    :     :  +- * ColumnarToRow (14)
               :                    :     :                 :              :                    :     :     +- CometScan parquet spark_catalog.default.catalog_sales (13)
               :                    :     :                 :              :                    :     +- BroadcastExchange (19)
               :                    :     :                 :              :                    :        +- * Filter (18)
               :                    :     :                 :              :                    :           +- * ColumnarToRow (17)
               :                    :     :                 :              :                    :              +- CometScan parquet spark_catalog.default.item (16)
               :                    :     :                 :              :                    +- ReusedExchange (22)
               :                    :     :                 :              +- ReusedExchange (30)
               :                    :     :                 +- BroadcastExchange (45)
               :                    :     :                    +- * Project (44)
               :                    :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :     :                          :- * Project (41)
               :                    :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
               :                    :     :                          :     :- * Filter (38)
               :                    :     :                          :     :  +- * ColumnarToRow (37)
               :                    :     :                          :     :     +- CometScan parquet spark_catalog.default.web_sales (36)
               :                    :     :                          :     +- ReusedExchange (39)
               :                    :     :                          +- ReusedExchange (42)
               :                    :     +- BroadcastExchange (57)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
               :                    :           :- * Filter (54)
               :                    :           :  +- * ColumnarToRow (53)
               :                    :           :     +- CometScan parquet spark_catalog.default.item (52)
               :                    :           +- ReusedExchange (55)
               :                    +- ReusedExchange (60)
               :- * Project (83)
               :  +- * Filter (82)
               :     +- * HashAggregate (81)
               :        +- Exchange (80)
               :           +- * HashAggregate (79)
               :              +- * Project (78)
               :                 +- * BroadcastHashJoin Inner BuildRight (77)
               :                    :- * Project (75)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (74)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (72)
               :                    :     :  :- * Filter (70)
               :                    :     :  :  +- * ColumnarToRow (69)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (68)
               :                    :     :  +- ReusedExchange (71)
               :                    :     +- ReusedExchange (73)
               :                    +- ReusedExchange (76)
               +- * Project (99)
                  +- * Filter (98)
                     +- * HashAggregate (97)
                        +- Exchange (96)
                           +- * HashAggregate (95)
                              +- * Project (94)
                                 +- * BroadcastHashJoin Inner BuildRight (93)
                                    :- * Project (91)
                                    :  +- * BroadcastHashJoin Inner BuildRight (90)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
                                    :     :  :- * Filter (86)
                                    :     :  :  +- * ColumnarToRow (85)
                                    :     :  :     +- CometScan parquet spark_catalog.default.web_sales (84)
                                    :     :  +- ReusedExchange (87)
                                    :     +- ReusedExchange (89)
                                    +- ReusedExchange (92)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(19) BroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(22) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#25]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#26, i_class_id#15 AS class_id#27, i_category_id#16 AS category_id#28]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#25]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(34) Exchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: hashpartitioning(brand_id#26, class_id#27, category_id#28, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#26, class_id#27, category_id#28]
Keys [3]: [brand_id#26, class_id#27, category_id#28]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#26, class_id#27, category_id#28]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#29, ws_sold_date_sk#30]
Condition : isnotnull(ws_item_sk#29)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#29]
Right keys [1]: [i_item_sk#32]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35]
Input [6]: [ws_item_sk#29, ws_sold_date_sk#30, i_item_sk#32, i_brand_id#33, i_class_id#34, i_category_id#35]

(42) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#36]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Input [5]: [ws_sold_date_sk#30, i_brand_id#33, i_class_id#34, i_category_id#35, d_date_sk#36]

(45) BroadcastExchange
Input [3]: [i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#26, 0), isnull(brand_id#26), coalesce(class_id#27, 0), isnull(class_id#27), coalesce(category_id#28, 0), isnull(category_id#28)]
Right keys [6]: [coalesce(i_brand_id#33, 0), isnull(i_brand_id#33), coalesce(i_class_id#34, 0), isnull(i_class_id#34), coalesce(i_category_id#35, 0), isnull(i_category_id#35)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#26, class_id#27, category_id#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#26, class_id#27, category_id#28]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#37]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#26, class_id#27, category_id#28]

(50) BroadcastExchange
Input [1]: [ss_item_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(54) Filter [codegen id : 23]
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Condition : isnotnull(i_item_sk#38)

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#37]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#38]
Right keys [1]: [ss_item_sk#37]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(58) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#38]
Join type: Inner
Join condition: None

(59) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(60) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#42]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(62) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#39, i_class_id#40, i_category_id#41, d_date_sk#42]

(63) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#39, i_class_id#40, i_category_id#41]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#43, isEmpty#44, count#45]
Results [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]

(64) Exchange
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Arguments: hashpartitioning(i_brand_id#39, i_class_id#40, i_category_id#41, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(65) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum#46, isEmpty#47, count#48]
Keys [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49, count(1)#50]
Results [5]: [i_brand_id#39, i_class_id#40, i_category_id#41, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#49 AS sales#51, count(1)#50 AS number_sales#52]

(66) Filter [codegen id : 26]
Input [5]: [i_brand_id#39, i_class_id#40, i_category_id#41, sales#51, number_sales#52]
Condition : (isnotnull(sales#51) AND (cast(sales#51 as decimal(32,6)) > cast(Subquery scalar-subquery#53, [id=#54] as decimal(32,6))))

(67) Project [codegen id : 26]
Output [6]: [sales#51, number_sales#52, store AS channel#55, i_brand_id#39 AS i_brand_id#56, i_class_id#40 AS i_class_id#57, i_category_id#41 AS i_category_id#58]
Input [5]: [i_brand_id#39, i_class_id#40, i_category_id#41, sales#51, number_sales#52]

(68) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#63)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]

(70) Filter [codegen id : 51]
Input [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]
Condition : isnotnull(cs_item_sk#59)

(71) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#64]

(72) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#59]
Right keys [1]: [ss_item_sk#64]
Join type: LeftSemi
Join condition: None

(73) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#65, i_brand_id#66, i_class_id#67, i_category_id#68]

(74) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#59]
Right keys [1]: [i_item_sk#65]
Join type: Inner
Join condition: None

(75) Project [codegen id : 51]
Output [6]: [cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [8]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_item_sk#65, i_brand_id#66, i_class_id#67, i_category_id#68]

(76) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#69]

(77) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#62]
Right keys [1]: [d_date_sk#69]
Join type: Inner
Join condition: None

(78) Project [codegen id : 51]
Output [5]: [cs_quantity#60, cs_list_price#61, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [7]: [cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_brand_id#66, i_class_id#67, i_category_id#68, d_date_sk#69]

(79) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#60, cs_list_price#61, i_brand_id#66, i_class_id#67, i_category_id#68]
Keys [3]: [i_brand_id#66, i_class_id#67, i_category_id#68]
Functions [2]: [partial_sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61)), partial_count(1)]
Aggregate Attributes [3]: [sum#70, isEmpty#71, count#72]
Results [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]

(80) Exchange
Input [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]
Arguments: hashpartitioning(i_brand_id#66, i_class_id#67, i_category_id#68, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(81) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]
Keys [3]: [i_brand_id#66, i_class_id#67, i_category_id#68]
Functions [2]: [sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61))#76, count(1)#77]
Results [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61))#76 AS sales#78, count(1)#77 AS number_sales#79]

(82) Filter [codegen id : 52]
Input [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sales#78, number_sales#79]
Condition : (isnotnull(sales#78) AND (cast(sales#78 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#53, [id=#54] as decimal(32,6))))

(83) Project [codegen id : 52]
Output [6]: [sales#78, number_sales#79, catalog AS channel#80, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sales#78, number_sales#79]

(84) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#84), dynamicpruningexpression(ws_sold_date_sk#84 IN dynamicpruning#85)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]

(86) Filter [codegen id : 77]
Input [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]
Condition : isnotnull(ws_item_sk#81)

(87) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#86]

(88) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#81]
Right keys [1]: [ss_item_sk#86]
Join type: LeftSemi
Join condition: None

(89) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90]

(90) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#81]
Right keys [1]: [i_item_sk#87]
Join type: Inner
Join condition: None

(91) Project [codegen id : 77]
Output [6]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_brand_id#88, i_class_id#89, i_category_id#90]
Input [8]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90]

(92) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#91]

(93) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#84]
Right keys [1]: [d_date_sk#91]
Join type: Inner
Join condition: None

(94) Project [codegen id : 77]
Output [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#88, i_class_id#89, i_category_id#90]
Input [7]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_brand_id#88, i_class_id#89, i_category_id#90, d_date_sk#91]

(95) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#88, i_class_id#89, i_category_id#90]
Keys [3]: [i_brand_id#88, i_class_id#89, i_category_id#90]
Functions [2]: [partial_sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83)), partial_count(1)]
Aggregate Attributes [3]: [sum#92, isEmpty#93, count#94]
Results [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]

(96) Exchange
Input [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]
Arguments: hashpartitioning(i_brand_id#88, i_class_id#89, i_category_id#90, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(97) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]
Keys [3]: [i_brand_id#88, i_class_id#89, i_category_id#90]
Functions [2]: [sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83))#98, count(1)#99]
Results [5]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83))#98 AS sales#100, count(1)#99 AS number_sales#101]

(98) Filter [codegen id : 78]
Input [5]: [i_brand_id#88, i_class_id#89, i_category_id#90, sales#100, number_sales#101]
Condition : (isnotnull(sales#100) AND (cast(sales#100 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#53, [id=#54] as decimal(32,6))))

(99) Project [codegen id : 78]
Output [6]: [sales#100, number_sales#101, web AS channel#102, i_brand_id#88, i_class_id#89, i_category_id#90]
Input [5]: [i_brand_id#88, i_class_id#89, i_category_id#90, sales#100, number_sales#101]

(100) Union

(101) Expand [codegen id : 79]
Input [6]: [sales#51, number_sales#52, channel#55, i_brand_id#56, i_class_id#57, i_category_id#58]
Arguments: [[sales#51, number_sales#52, channel#55, i_brand_id#56, i_class_id#57, i_category_id#58, 0], [sales#51, number_sales#52, channel#55, i_brand_id#56, i_class_id#57, null, 1], [sales#51, number_sales#52, channel#55, i_brand_id#56, null, null, 3], [sales#51, number_sales#52, channel#55, null, null, null, 7], [sales#51, number_sales#52, null, null, null, null, 15]], [sales#51, number_sales#52, channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107]

(102) HashAggregate [codegen id : 79]
Input [7]: [sales#51, number_sales#52, channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107]
Keys [5]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107]
Functions [2]: [partial_sum(sales#51), partial_sum(number_sales#52)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [8]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107, sum#111, isEmpty#112, sum#113]

(103) Exchange
Input [8]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(104) HashAggregate [codegen id : 80]
Input [8]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107, sum#111, isEmpty#112, sum#113]
Keys [5]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, spark_grouping_id#107]
Functions [2]: [sum(sales#51), sum(number_sales#52)]
Aggregate Attributes [2]: [sum(sales#51)#114, sum(number_sales#52)#115]
Results [6]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, sum(sales#51)#114 AS sum(sales)#116, sum(number_sales#52)#115 AS sum(number_sales)#117]

(105) TakeOrderedAndProject
Input [6]: [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, sum(sales)#116, sum(number_sales)#117]
Arguments: 100, [channel#103 ASC NULLS FIRST, i_brand_id#104 ASC NULLS FIRST, i_class_id#105 ASC NULLS FIRST, i_category_id#106 ASC NULLS FIRST], [channel#103, i_brand_id#104, i_class_id#105, i_category_id#106, sum(sales)#116, sum(number_sales)#117]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#53, [id=#54]
* HashAggregate (124)
+- Exchange (123)
   +- * HashAggregate (122)
      +- Union (121)
         :- * Project (110)
         :  +- * BroadcastHashJoin Inner BuildRight (109)
         :     :- * ColumnarToRow (107)
         :     :  +- CometScan parquet spark_catalog.default.store_sales (106)
         :     +- ReusedExchange (108)
         :- * Project (115)
         :  +- * BroadcastHashJoin Inner BuildRight (114)
         :     :- * ColumnarToRow (112)
         :     :  +- CometScan parquet spark_catalog.default.catalog_sales (111)
         :     +- ReusedExchange (113)
         +- * Project (120)
            +- * BroadcastHashJoin Inner BuildRight (119)
               :- * ColumnarToRow (117)
               :  +- CometScan parquet spark_catalog.default.web_sales (116)
               +- ReusedExchange (118)


(106) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#118, ss_list_price#119, ss_sold_date_sk#120]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#120), dynamicpruningexpression(ss_sold_date_sk#120 IN dynamicpruning#121)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(107) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#118, ss_list_price#119, ss_sold_date_sk#120]

(108) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#122]

(109) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#120]
Right keys [1]: [d_date_sk#122]
Join type: Inner
Join condition: None

(110) Project [codegen id : 2]
Output [2]: [ss_quantity#118 AS quantity#123, ss_list_price#119 AS list_price#124]
Input [4]: [ss_quantity#118, ss_list_price#119, ss_sold_date_sk#120, d_date_sk#122]

(111) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#125, cs_list_price#126, cs_sold_date_sk#127]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#127), dynamicpruningexpression(cs_sold_date_sk#127 IN dynamicpruning#128)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(112) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#125, cs_list_price#126, cs_sold_date_sk#127]

(113) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#129]

(114) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#127]
Right keys [1]: [d_date_sk#129]
Join type: Inner
Join condition: None

(115) Project [codegen id : 4]
Output [2]: [cs_quantity#125 AS quantity#130, cs_list_price#126 AS list_price#131]
Input [4]: [cs_quantity#125, cs_list_price#126, cs_sold_date_sk#127, d_date_sk#129]

(116) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#132, ws_list_price#133, ws_sold_date_sk#134]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#134), dynamicpruningexpression(ws_sold_date_sk#134 IN dynamicpruning#135)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(117) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#132, ws_list_price#133, ws_sold_date_sk#134]

(118) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#136]

(119) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#134]
Right keys [1]: [d_date_sk#136]
Join type: Inner
Join condition: None

(120) Project [codegen id : 6]
Output [2]: [ws_quantity#132 AS quantity#137, ws_list_price#133 AS list_price#138]
Input [4]: [ws_quantity#132, ws_list_price#133, ws_sold_date_sk#134, d_date_sk#136]

(121) Union

(122) HashAggregate [codegen id : 7]
Input [2]: [quantity#123, list_price#124]
Keys: []
Functions [1]: [partial_avg((cast(quantity#123 as decimal(10,0)) * list_price#124))]
Aggregate Attributes [2]: [sum#139, count#140]
Results [2]: [sum#141, count#142]

(123) Exchange
Input [2]: [sum#141, count#142]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(124) HashAggregate [codegen id : 8]
Input [2]: [sum#141, count#142]
Keys: []
Functions [1]: [avg((cast(quantity#123 as decimal(10,0)) * list_price#124))]
Aggregate Attributes [1]: [avg((cast(quantity#123 as decimal(10,0)) * list_price#124))#143]
Results [1]: [avg((cast(quantity#123 as decimal(10,0)) * list_price#124))#143 AS average_sales#144]

Subquery:2 Hosting operator id = 106 Hosting Expression = ss_sold_date_sk#120 IN dynamicpruning#12

Subquery:3 Hosting operator id = 111 Hosting Expression = cs_sold_date_sk#127 IN dynamicpruning#12

Subquery:4 Hosting operator id = 116 Hosting Expression = ws_sold_date_sk#134 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (129)
+- * Project (128)
   +- * Filter (127)
      +- * ColumnarToRow (126)
         +- CometScan parquet spark_catalog.default.date_dim (125)


(125) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#42, d_year#145, d_moy#146]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(126) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#42, d_year#145, d_moy#146]

(127) Filter [codegen id : 1]
Input [3]: [d_date_sk#42, d_year#145, d_moy#146]
Condition : ((((isnotnull(d_year#145) AND isnotnull(d_moy#146)) AND (d_year#145 = 2001)) AND (d_moy#146 = 11)) AND isnotnull(d_date_sk#42))

(128) Project [codegen id : 1]
Output [1]: [d_date_sk#42]
Input [3]: [d_date_sk#42, d_year#145, d_moy#146]

(129) BroadcastExchange
Input [1]: [d_date_sk#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (134)
+- * Project (133)
   +- * Filter (132)
      +- * ColumnarToRow (131)
         +- CometScan parquet spark_catalog.default.date_dim (130)


(130) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#147]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(131) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#25, d_year#147]

(132) Filter [codegen id : 1]
Input [2]: [d_date_sk#25, d_year#147]
Condition : (((isnotnull(d_year#147) AND (d_year#147 >= 1999)) AND (d_year#147 <= 2001)) AND isnotnull(d_date_sk#25))

(133) Project [codegen id : 1]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_year#147]

(134) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#12

Subquery:9 Hosting operator id = 82 Hosting Expression = ReusedSubquery Subquery scalar-subquery#53, [id=#54]

Subquery:10 Hosting operator id = 68 Hosting Expression = cs_sold_date_sk#62 IN dynamicpruning#5

Subquery:11 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#53, [id=#54]

Subquery:12 Hosting operator id = 84 Hosting Expression = ws_sold_date_sk#84 IN dynamicpruning#5


